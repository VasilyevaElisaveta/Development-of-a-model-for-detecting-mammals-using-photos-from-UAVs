import os
import random
import zipfile
import shutil

"""
Разделение датасета на обучающую, тренировочную и валидационную выборки, а также замена лейбла
"""

# Распакуем zip-архив
zip_path = "/content/drive/MyDrive/deers_1-5.zip"  # Замените на путь к вашему zip-файлу
data_dir = "/content/deer_data"

with zipfile.ZipFile(zip_path, 'r') as zip_ref:
    zip_ref.extractall(data_dir)

annotated_dirs = [os.path.join(data_dir, f"{i}_annotated") for i in range(1, 6)]


def get_annotated_files(annotated_dirs):
    image_paths = []
    label_paths = []
    for dir_path in annotated_dirs:
        images_dir = os.path.join(dir_path, "images")
        labels_dir = os.path.join(dir_path, "labels")
        for image_file in os.listdir(images_dir):
            if image_file.endswith(".jpg") or image_file.endswith(".png"):
                image_path = os.path.join(images_dir, image_file)
                label_path = os.path.join(labels_dir, image_file.replace(".jpg", ".txt").replace(".png", ".txt"))
                if os.path.exists(label_path):  # Убедимся, что аннотация существует
                    image_paths.append(image_path)
                    label_paths.append(label_path)
    return image_paths, label_paths


image_paths, label_paths = get_annotated_files(annotated_dirs)

random.seed(42)
indices = list(range(len(image_paths)))
random.shuffle(indices)

train_indices = indices[:1000]  # 1000 для обучения
val_indices = indices[1000:1400]  # 400 для валидации
test_indices = indices[1400:]  # Остальные для тестирования


# Разделим данные
def split_dataset(indices, image_paths, label_paths, split_dir):
    os.makedirs(os.path.join(split_dir, "images"), exist_ok=True)
    os.makedirs(os.path.join(split_dir, "labels"), exist_ok=True)
    for idx in indices:
        shutil.copy(image_paths[idx], os.path.join(split_dir, "images"))
        shutil.copy(label_paths[idx], os.path.join(split_dir, "labels"))


output_dir = "/content/deer_split"
train_dir = os.path.join(output_dir, "train")
val_dir = os.path.join(output_dir, "val")
test_dir = os.path.join(output_dir, "test")

split_dataset(train_indices, image_paths, label_paths, train_dir)
split_dataset(val_indices, image_paths, label_paths, val_dir)
split_dataset(test_indices, image_paths, label_paths, test_dir)

print("Датасет успешно разделён!")


def update_labels(dataset_dirs, old_class=0, new_class=1):
    for dataset_dir in dataset_dirs:
        label_dir = os.path.join(dataset_dir, "labels")  # Папка с метками
        for label_file in os.listdir(label_dir):
            if label_file.endswith(".txt"):  # Только .txt файлы
                label_path = os.path.join(label_dir, label_file)
                with open(label_path, "r") as f:
                    lines = f.readlines()
                with open(label_path, "w") as f:
                    for line in lines:
                        parts = line.split()  # Разделяем строку по пробелам
                        if int(parts[0]) == old_class:
                            parts[0] = str(new_class)  # Заменяем старый класс на новый
                        f.write(" ".join(parts) + "\n")  # Записываем обратно в файл


# Папки с размеченными данными
deer_dataset_dirs = [
    '/content/deer_split/train',
    '/content/deer_split/val',
    '/content/deer_split/test'
]

update_labels(deer_dataset_dirs, old_class=0, new_class=1)

print("Метки для оленей обновлены!")
